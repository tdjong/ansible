# encoding: utf-8

##
# Backup v5.x Configuration
# {{ ansible_managed }}
#
# Documentation: http://backup.github.io/backup
# Issue Tracker: https://github.com/backup/backup/issues
##

preconfigure 'GenericBackup' do

  split_into_chunks_of {{ backup_split_into_chunks_of }}
  compress_with Gzip

  FileUtils.mkdir_p('{{ backup_logs }}')
  FileUtils.mkdir_p('{{ backup_tmp }}')
  FileUtils.mkdir_p('{{ backup_archives }}')

  logfile = File.join('{{ backup_logs }}',"{{ inventory_hostname }}_#{self.trigger}.log")

  before do
    File.delete(logfile) if File.exists?(logfile)
    `/etc/backup/scripts/hooks.sh #{self.trigger} before #{logfile}`
    if $? != 0
      Logger.error File.read(logfile) if File.exists?(logfile)
      raise "Error in #{self.trigger}-before"
    end
  end

{% if backup_notify_mail['enabled'] == true %}
  notify_by Mail do |mail|
{% if backup_notify_mail['from'] is defined %}  
    mail.from    = '{{ backup_notify_mail['from'] }}'
{% else %}
    mail.from    = '{{ inventory_hostname }}@{{ backup_notify_mail['domain'] }}'
{% endif %}
    mail.to = '{{ backup_notify_mail['to'] }}'
    mail.address = '{{ backup_notify_mail['address'] }}'
    mail.port    = '{{ backup_notify_mail['port'] }}'
    mail.domain  = '{{ backup_notify_mail['domain'] }}'
    mail.on_success = {{ backup_notify_mail['on_success'] }}
    mail.on_warning = {{ backup_notify_mail['on_warning'] }}
    mail.on_failure = {{ backup_notify_mail['on_failure'] }}
{%   if backup_notify_mail['encryption'] is defined %}
    mail.encryption = {{ backup_notify_mail['encryption'] }}
{%   endif %}
  end
{% endif %}
{% if backup_notify_slack['enabled'] == true %}
  notify_by Slack do |slack|
    slack.webhook_url = '{{ backup_notify_slack['webhook'] }}'
    slack.username = 'backup'
    slack.channel = '{{ backup_notify_slack['channel'] }}'
    slack.on_success = {{ backup_notify_slack['on_success'] }}
    slack.on_warning = {{ backup_notify_slack['on_warning'] }}
    slack.on_failure = {{ backup_notify_slack['on_failure'] }}
    slack.message = lambda do |model, data|
       "[{{ inventory_hostname }}] #{data[:status][:message]} #{model.label} (#{model.trigger})"
    end    
  end
{% endif %}  
  after do 
    `/etc/backup/scripts/hooks.sh #{self.trigger} after #{logfile}`
    if $? != 0
      Logger.error File.read(logfile) if File.exists?(logfile)
      raise "Error in #{self.trigger}-after"
    end
  end
end

tmp_path  File.join('{{ backup_tmp }}', '{{ inventory_hostname }}')
